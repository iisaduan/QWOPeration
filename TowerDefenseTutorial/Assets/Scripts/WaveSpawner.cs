using System;
using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class WaveSpawner : MonoBehaviour
{

    [Header("Attributes")]

    public static int EnemiesAlive = 0;

    public float timeBetweenWaves = 5f;

    private float countdown = 3f;

    public static float timeBetweenEnemies = 1f / 2;

    public Text WaveCountdownText;

    private static int randomEnemyIndex;

    private static int numberOfEnemiesGenerated = 1;


    enum GameMode { Survival, Level };

[Header("Unity Setup Fields")]

    //public Transform enemyPrefab;

    public Wave[] waves; // for level mode

    public GameObject[] enemies;  // for survival mode

    public Transform spawnPoint;

    private int waveIndex = 0;

    /* Update() - every frame
     * 
     * determines if wave should spawn this frame
     *
     * decreases countdown to next wave and updates wave countdown text
     *
     */
    private void Update()
    {

        // don't generate new enemies when the game is over
        // Todo: decide on an enemy generating strategy: how much more enemies do we want to generate
        // in later rounds than earlier ones
        if (GameManager.gameIsOver || GameManager.gameFinished) 
        {
            return;
        }

        // if countdown = 0, spawn a wave and reset countdown
        if (countdown <= 0)
        {
            StartCoroutine(SpawnWave());
            // add the time between waves and the time it takes to generate a wave of enemies to the countdown
            countdown = timeBetweenWaves + numberOfEnemiesGenerated*timeBetweenEnemies;
            return;
        }

        // decrease countdown by amount of time passed since last frame
        countdown -= Time.deltaTime;
        // makes sure countdown never is  below 0
        countdown = Mathf.Clamp(countdown, 0f, Mathf.Infinity);

        // update wave countdown text
        WaveCountdownText.text = string.Format("{0:00.00}", countdown);
    }

    /* SpawnWave()
     *
     * spawns correct number of enemies for a wave
     * 
     */
    IEnumerator SpawnWave()
    {
        // first, check what game mode we are in
        GameMode mode = GameMode.Level;
        if (SceneManager.GetActiveScene().name == "Survival")
        {
            mode = GameMode.Survival;
        }

        //each time a new wave of enemies is spawned, the player has survived another round
        // Todo: maybe change later to keep track of if the enemies of a "round" have been killed
        // and use that to keep track of how many rounds player has survived
        PlayerStats.Rounds++;

        // WaveSpawning mechanism for level mode
        if (mode == GameMode.Level)
        {
            // get the wave that will be generated
            Wave wave = waves[waveIndex];

            // add the number of enemies generated by the current wave onto the number of alive enemies
            EnemiesAlive += wave.count;

            // spawns waveIndex number of enemies at wave.rate per second
            for (int i = 0; i < wave.count; i++)
            {
                SpawnEnemy(wave.enemy);
                yield return new WaitForSeconds(1f / wave.rate);
            }

            waveIndex++;

            if (waveIndex == waves.Length)
            {
                GameManager.gameFinished = true;
            }
        }
        // WaveSpawning mechanism for survival mode
        else
        {
            // generate a random number to be used as the index of the type of enemy we want to spawn
            randomEnemyIndex = UnityEngine.Random.Range(0, enemies.Length);
            numberOfEnemiesGenerated = (int)Math.Pow(PlayerStats.Rounds, 0.5);
            EnemiesAlive += (int) Math.Pow(PlayerStats.Rounds, 0.5);
            // generate number of enemies in proportion to the square root of the rounds the player has survived
            for (int i = 0; i < numberOfEnemiesGenerated; i++)
            {
                // randomly choose an enemy out of the existing types to generate
                SpawnEnemy(enemies[randomEnemyIndex]);
                // wait for the set timeBetweenEnemies in between generating enemies in the same wave
                yield return new WaitForSeconds(timeBetweenEnemies);
            }
        }
    }

    /* SpawnEnemy()
     *
     * Instantiates enemy prefab that is passed in at spawn point
     *
     * TODO: if want to add more enemy spawning locations, edit this and spawn position stuff
     * 
     */
    void SpawnEnemy(GameObject enemyPrefab)
    {
        Instantiate(enemyPrefab, spawnPoint.position, spawnPoint.rotation);
    }
}
