
using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class WaveSpawner : MonoBehaviour
{

    [Header("Attributes")]

    public static int EnemiesAlive = 0;

    public float timeBetweenWaves = 5f;

    private float countdown = 3f;

    public Text WaveCountdownText;

    public static int randomWaveIndex;

    enum GameMode { Survival, Level };

[Header("Unity Setup Fields")]

    //public Transform enemyPrefab;

    public Wave[] waves;

    public Transform spawnPoint;

    private int waveIndex = 0;

    /* Update() - every frame
     * 
     * determines if wave should spawn this frame
     *
     * decreases countdown to next wave and updates wave countdown text
     *
     */
    private void Update()
    {

        // don't generate new enemies when the game is over
        // Todo: decide on an enemy generating strategy: how much more enemies do we want to generate
        // in later rounds than earlier ones
        if (GameManager.gameIsOver || GameManager.gameFinished) 
        {
            return;
        }

        // if countdown = 0, spawn a wave and reset countdown
        if (countdown <= 0)
        {
            StartCoroutine(SpawnWave());
            countdown = timeBetweenWaves;
            return;
        }

        // decrease countdown by amount of time passed since last frame
        countdown -= Time.deltaTime;
        // makes sure countdown never is  below 0
        countdown = Mathf.Clamp(countdown, 0f, Mathf.Infinity);

        // update wave countdown text
        WaveCountdownText.text = string.Format("{0:00.00}", countdown);
    }

    /* SpawnWave()
     *
     * spawns correct number of enemies for a wave
     * 
     */
    IEnumerator SpawnWave()
    {
        // first, check what game mode we are in
        GameMode mode = GameMode.Level;
        if (SceneManager.GetActiveScene().name == "Survival")
        {
            mode = GameMode.Survival;
        }

        //each time a new wave of enemies is spawned, the player has survived another round
        // Todo: maybe change later to keep track of if the enemies of a "round" have been killed
        // and use that to keep track of how many rounds player has survived
        PlayerStats.Rounds++;

        // get the wave that will be generated
        Wave wave = waves[waveIndex];

        // add the number of enemies generated by the current wave onto the number of alive enemies
        EnemiesAlive += wave.count;

        // if we are in survival mode, and
        // the round we're on is a multiple of the 30th round
        // Todo: find a better way to add more enemies that will more frequently
        // add enemies as the number of rounds increases
        if (mode == GameMode.Survival && PlayerStats.Rounds % 30 == 0)
        {
            // generate a random number to be used as the index of the wave that
            // we want to increase the enemy count of
            randomWaveIndex = Random.Range(0, waves.Length);
            // if the wave we're generating is the one that we want to increase the enemy count of
            if (waveIndex == randomWaveIndex)
            {
                // increase the number of enemies generated by one
                wave.count++;
            }
        }

        // spawns waveIndex number of enemies at wave.rate per second
        for (int i = 0; i < wave.count; i++)
        {
            SpawnEnemy(wave.enemy);
            yield return new WaitForSeconds(1f/wave.rate);
        }

        waveIndex++;

        if (waveIndex == waves.Length)
        {
            // Todo: try to generate enemies that get harder and harder for survival mode instead of cycling through the same ones
            //       may have to change structure from array to list so that we can change the size?
            // if we have generated the last wave, set waveIndex back to 0 so we can cycle through the waves again 
            if (mode == GameMode.Survival)
            {
                waveIndex = 0;
            }
            // if we are in level mode, then the level has been completed
            else
            {
                GameManager.gameFinished = true;
            }
        }
    }

    /* SpawnEnemy()
     *
     * Instantiates enemy prefab that is passed in at spawn point
     *
     * TODO: if want to add more enemy spawning locations, edit this and spawn position stuff
     * 
     */
    void SpawnEnemy(GameObject enemyPrefab)
    {
        Instantiate(enemyPrefab, spawnPoint.position, spawnPoint.rotation);
    }
}
